{"version":3,"file":"CartSummaryItem.js","sources":["../../src/utils/autocompleteFieldCodes/autocompleteFieldCodes.ts","../../src/utils/isEmpty/isEmpty.ts","../../src/utils/processFormFields/processFormFields.ts","../../src/utils/refetchEstimatedShippingMethods/refetchEstimatedShippingMethods.ts","../../src/components/FieldsForm/fieldFactory.tsx","../../src/components/FieldsForm/validation.ts","../../src/components/FieldsForm/FieldsFormSkeleton.tsx","../../src/components/FieldsForm/FieldsForm.tsx","../../../ElsieSDK/packages/elsie/src/lib/form-values.ts","../../src/components/AddressForm/AddressForm.tsx","../../src/components/AddressForm/useAddressBackup.ts","../../src/hooks/useValidity/useValidity.ts","../../src/components/AddressForm/useAddressForm.ts","../../src/components/AddressForm/usePreselectedFields.ts","../../src/hooks/useBreakpoint/useBreakpoint.ts","../../src/components/Checkout/Checkout.tsx","../../src/components/Heading/Heading.tsx"],"sourcesContent":["export interface fieldCodes {\n  firstname: string;\n  lastname: string;\n  company: string;\n  country: string;\n  region: string;\n  city: string;\n  postcode: string;\n  telephone: string;\n  street: string;\n  email: string;\n  middlename: string;\n  prefix: string;\n  suffix: string;\n}\n\n// HTML attribute: autocomplete\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\n// https://www.w3.org/TR/WCAG21/#input-purposes\nconst autocompleteFieldCodes: fieldCodes = {\n  firstname: 'given-name',\n  lastname: 'family-name',\n  company: 'organization',\n  country: 'country',\n  region: 'address-level1',\n  city: 'address-level2',\n  postcode: 'postal-code',\n  telephone: 'tel',\n  street: 'address-line1',\n  email: 'email',\n  middlename: 'additional-name',\n  prefix: 'honorific-prefix',\n  suffix: 'honorific-suffix',\n};\n\nexport default autocompleteFieldCodes;\n","export function isEmpty(obj: Record<string, any>): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}","import { AttributeFrontendInputEnum } from '@/checkout/__generated__/types';\nimport {\n  AddressFormElement,\n  AddressFormErrors,\n  AddressFormField,\n  AddressFormFieldCode,\n  AddressFormType,\n  AddressFormValues,\n  Country,\n  Region,\n  StoreConfig,\n} from '@/checkout/data/models';\nimport { regionsSignal } from '@/checkout/signals';\n\nimport {\n  getMultilineValues,\n  refetchEstimatedShippingMethods,\n} from '@/checkout/utils';\nimport { PickerOption } from '@adobe/elsie/components';\nimport { StateUpdater, Dispatch } from 'preact/hooks';\n\nexport type FormFieldsProcessorProps = {\n  address: AddressFormValues;\n  addressType: AddressFormType;\n  availableCountries: Country[] | undefined;\n  availableRegions: Region[];\n  config: StoreConfig;\n  dismissError: (code: string) => void;\n  errors: AddressFormErrors;\n  fields: AddressFormField[];\n  onBlur: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n  onSelection: (event: Event) => void;\n  setAddress: Dispatch<StateUpdater<AddressFormValues>>;\n};\n\nconst transformRegionOptions = (regions: Region[]): PickerOption[] => {\n  return regions.map((region) => {\n    const value = region?.id?.toString() || region.code;\n    return { text: region.name, value };\n  });\n};\n\nconst transformCountryOptions = (\n  countries: Country[] | undefined\n): PickerOption[] => {\n  if (!countries) return [];\n\n  return countries.map((country) => ({\n    text: country.label,\n    value: country.value,\n  }));\n};\n\nexport function processFormFields({\n  address,\n  addressType,\n  availableCountries,\n  availableRegions,\n  config,\n  dismissError,\n  errors,\n  fields,\n  onBlur,\n  onChange,\n  onInvalid,\n  onSelection,\n  setAddress,\n}: FormFieldsProcessorProps): AddressFormElement[] {\n  const resetRegion = () => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFieldCode.Region]: '',\n      [AddressFormFieldCode.RegionId]: '',\n    }));\n\n    dismissError(AddressFormFieldCode.Region);\n  };\n\n  const syncRegionId = (regionId: string) => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFieldCode.RegionId]: regionId,\n    }));\n  };\n\n  return fields.map((field) => {\n    let error: string | string[];\n    let frontendInput = field.frontendInput;\n    let handleSelect;\n    let isDisabled = field.isDisabled;\n    let isRequired = field.isRequired;\n    let options: PickerOption[] = [];\n    let value: string | string[];\n\n    if (frontendInput === AttributeFrontendInputEnum.Multiline) {\n      value = getMultilineValues(field.code, address);\n      error = getMultilineValues(field.code, errors);\n    } else {\n      value = address[field.code];\n      error = errors[field.code] || '';\n    }\n\n    if (field.code === AddressFormFieldCode.Country) {\n      options = transformCountryOptions(availableCountries);\n      if (addressType === AddressFormType.SHIPPING) {\n        regionsSignal.value.country = value as string;\n\n        handleSelect = (event: Event) => {\n          const target = event.target as HTMLInputElement;\n          const { value } = target;\n\n          if (value) {\n            refetchEstimatedShippingMethods({\n              country_code: value,\n            });\n          }\n\n          onSelection(event);\n          resetRegion();\n        };\n      } else {\n        handleSelect = onSelection;\n      }\n    }\n\n    if (field.code === AddressFormFieldCode.RegionId) {\n      if (addressType === AddressFormType.SHIPPING) {\n        regionsSignal.value.selectedRegionId = value as string;\n      }\n    }\n\n    if (field.code === AddressFormFieldCode.Region) {\n      if (addressType === regionsSignal.value.addressType) {\n        isDisabled = regionsSignal.value.pending;\n      }\n\n      isRequired = config!.countriesWithRequiredRegion.includes(\n        address?.country_id\n      );\n      options = transformRegionOptions(availableRegions);\n\n      if (!isRequired && !config!.displayStateIfOptional) {\n        frontendInput = AttributeFrontendInputEnum.Undefined;\n      }\n\n      frontendInput =\n        options.length > 0\n          ? AttributeFrontendInputEnum.Select\n          : AttributeFrontendInputEnum.Text;\n\n      if (frontendInput === AttributeFrontendInputEnum.Select) {\n        if (addressType === AddressFormType.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          handleSelect = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const selectedRegion = target.value;\n\n            refetchEstimatedShippingMethods({\n              country_code: regionsSignal.value.country as string,\n              region_id: selectedRegion,\n            });\n\n            onSelection(event);\n            syncRegionId(selectedRegion);\n          };\n        } else {\n          handleSelect = (event: Event) => {\n            onSelection(event);\n            const target = event.target as HTMLSelectElement;\n            const selectedRegion = target.value;\n            syncRegionId(selectedRegion);\n          };\n        }\n      } else if (frontendInput === AttributeFrontendInputEnum.Text) {\n        if (addressType === AddressFormType.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          const defaultOnChange = onChange;\n\n          onChange = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const { value } = target;\n\n            if (regionsSignal.value.country) {\n              refetchEstimatedShippingMethods({\n                country_code: regionsSignal.value.country as string,\n                region_name: value as string,\n              });\n            }\n\n            defaultOnChange(event);\n          };\n        }\n      }\n\n      value =\n        options.length > 0\n          ? options.find((regionOption) => regionOption!.value === value)\n              ?.value || ''\n          : value;\n    }\n\n    if (field.code === AddressFormFieldCode.PostCode) {\n      isRequired = !config!.countriesWithOptionalZipCode.includes(\n        address?.country_id as string\n      );\n    }\n\n    return {\n      ...field,\n      error,\n      frontendInput,\n      handleSelect,\n      isDisabled,\n      isRequired,\n      onBlur,\n      onChange,\n      onInvalid,\n      options,\n      value,\n    };\n  });\n}\n\nexport type ProcessedFormFields = ReturnType<typeof processFormFields>;\n","import { cartSignal } from '@/checkout/signals';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { ShippingEstimationCriteria, estimateShippingMethods } from '@/checkout/api';\n\nlet estimateShipppingTimer: ReturnType<typeof setTimeout>;\nexport function refetchEstimatedShippingMethods(\n  criteria: ShippingEstimationCriteria\n) {\n  const cartData = cartSignal.value.data;\n  const hasCartData = !!cartData;\n  const firstAddress = cartData?.shippingAddresses?.[0];\n  const availableShippingMethods = firstAddress?.availableShippingMethods;\n\n  if (hasCartData && !availableShippingMethods) {\n    clearTimeout(estimateShipppingTimer);\n\n    estimateShipppingTimer = setTimeout(() => {\n      estimateShippingMethods({ cartId: cartData.id, criteria });\n    }, DEBOUNCE_TIME);\n  }\n}\n","import { validityProps } from '@/checkout/components/FieldsForm';\nimport { AddressFormElement, AddressFormType } from '@/checkout/data/models';\nimport autocompleteFieldCodes, {\n  fieldCodes,\n} from '@/checkout/utils/autocompleteFieldCodes/autocompleteFieldCodes';\nimport { Field, Input, Picker } from '@adobe/elsie/components';\n\ntype FieldFactoryProps = {\n  addressType: AddressFormType;\n  element: AddressFormElement;\n};\n\nconst generateId = ({\n  addressType,\n  code,\n  index,\n}: {\n  addressType: AddressFormType;\n  code: string;\n  index?: number;\n}) => {\n  return index ? `${addressType}-${code}-${index}` : `${addressType}-${code}`;\n};\n\nconst generateClassName = (code: string) => {\n  return `checkout-address-form__${code}`;\n};\n\nconst hiddenField = ({ addressType, element }: FieldFactoryProps) => {\n  const { code, value, defaultValue } = element;\n\n  return (\n    <input\n      className={generateClassName(code)}\n      id={generateId({ addressType, code })}\n      key={code}\n      name={code}\n      type=\"hidden\"\n      value={value || defaultValue}\n    />\n  );\n};\n\nconst textField = ({ addressType, element }: FieldFactoryProps) => {\n  const {\n    code,\n    error,\n    isDisabled,\n    label,\n    onBlur,\n    onChange,\n    onInvalid,\n    validateRules,\n    value,\n  } = element;\n\n  const validity = validityProps(validateRules);\n\n  return (\n    <Field disabled={isDisabled} error={error as string}>\n      <Input\n        aria-label={label}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        className={generateClassName(code)}\n        floatingLabel={`${label} ${element.isRequired ? '*' : ''}`}\n        id={generateId({ addressType, code })}\n        onBlur={onBlur}\n        onChange={onChange}\n        onInvalid={onInvalid}\n        placeholder={label!}\n        required={element.isRequired || false}\n        type=\"text\"\n        // @ts-ignore\n        name={code}\n        // @ts-ignore\n        value={value ?? undefined}\n        {...validity}\n      />\n    </Field>\n  );\n};\n\nconst multilineField = ({ addressType, element }: FieldFactoryProps) => {\n  const {\n    code,\n    error,\n    isDisabled,\n    isRequired,\n    label,\n    multilineCount,\n    onBlur,\n    onChange,\n    onInvalid,\n    validateRules,\n    value,\n  } = element;\n\n  const numOfFields = multilineCount ?? 0;\n  const validity = validityProps(validateRules);\n\n  return (\n    <>\n      {Array.from(Array(numOfFields).keys()).map((i) => (\n        <Field\n          disabled={isDisabled}\n          error={(error as string[])?.[i] || ''}\n          key={`${code}-${i}`}\n          className=\"dropin-field--multiline\"\n        >\n          <Input\n            id={generateId({ addressType, code, index: i })}\n            className={generateClassName(code)}\n            floatingLabel={`${label} ${i != 0 ? i : ''} ${\n              isRequired && i === 0 ? '*' : ''\n            }`}\n            autocomplete={\n              i === 0 ? autocompleteFieldCodes[code as keyof fieldCodes] : 'off'\n            }\n            aria-label={label!}\n            placeholder={`${label} ${i != 0 ? i : ''}`}\n            type=\"text\"\n            required={isRequired && i === 0}\n            onChange={onChange}\n            onBlur={onBlur}\n            onInvalid={onInvalid}\n            // @ts-ignore\n            name={`${code}-${i}`}\n            // @ts-ignore\n            value={(value as string[])?.[i] || undefined}\n            {...validity}\n          />\n        </Field>\n      ))}\n    </>\n  );\n};\n\nconst selectField = ({ addressType, element }: FieldFactoryProps) => {\n  const {\n    code,\n    error,\n    handleSelect,\n    isDisabled,\n    isRequired,\n    label,\n    onBlur,\n    onInvalid,\n    options,\n    value,\n  } = element;\n\n  const handleSelectAttribute = handleSelect ? { handleSelect } : {};\n\n  return (\n    <Field disabled={isDisabled} error={error as string}>\n      <Picker\n        id={generateId({ addressType, code })}\n        className={generateClassName(code)}\n        key={code}\n        name={code}\n        floatingLabel={`${label} ${isRequired ? '*' : ''}`}\n        required={isRequired}\n        placeholder={label!}\n        aria-label={label!}\n        options={options}\n        value={value as string}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        onBlur={onBlur}\n        onInvalid={onInvalid}\n        {...handleSelectAttribute}\n      />\n    </Field>\n  );\n};\n\nexport const createField = ({ addressType, element }: FieldFactoryProps) => {\n  switch (element.frontendInput) {\n    case 'BOOLEAN':\n    case 'DATE':\n    case 'DATETIME':\n    case 'FILE':\n    case 'GALLERY':\n    case 'IMAGE':\n    case 'MEDIA_IMAGE':\n    case 'MULTISELECT':\n    case 'PRICE':\n    case 'TEXTAREA':\n    case 'UNDEFINED':\n    case 'WEIGHT':\n      return null;\n    case 'HIDDEN':\n      return hiddenField({ addressType, element });\n    case 'TEXT':\n      return textField({ addressType, element });\n    case 'MULTILINE':\n      return multilineField({ addressType, element });\n    case 'SELECT':\n      return selectField({ addressType, element });\n    default:\n      return null;\n  }\n};\n","import { AddressFormField } from '@/checkout/data/models/address-form-fields';\nimport { ValidationRuleEnum } from '@/checkout/__generated__/types';\n\nexport type ValidityProps = {\n  accept?: string;\n  max?: string | number;\n  maxLength?: number;\n  min?: string | number;\n  minLength?: number;\n  pattern?: string;\n  required?: boolean;\n};\n\nexport type InputValidation =\n  | 'alphanumeric'\n  | 'alphanumeric-w-space'\n  | 'alphanum-with-spaces'\n  | 'alpha'\n  | 'url'\n  | 'numeric'\n  | 'email';\n\nexport const validityProps = (\n  rules: AddressFormField['validateRules']\n): ValidityProps => {\n  if (!rules) return {};\n\n  return rules.reduce((props, rule) => {\n    switch (rule.name) {\n      case ValidationRuleEnum.DateRangeMax:\n        return { ...props, max: rule.value };\n      case ValidationRuleEnum.DateRangeMin:\n        return { ...props, min: rule.value };\n      case ValidationRuleEnum.FileExtensions:\n        return { ...props, accept: rule.value };\n      case ValidationRuleEnum.InputValidation:\n        return {\n          ...props,\n          pattern: patternFor(rule.value as InputValidation),\n        };\n      case ValidationRuleEnum.MaxFileSize:\n      case ValidationRuleEnum.MaxImageHeight:\n      case ValidationRuleEnum.MaxImageWidth:\n        return props;\n      case ValidationRuleEnum.MaxTextLength:\n        return { ...props, maxLength: rule.value };\n      case ValidationRuleEnum.MinTextLength:\n        return { ...props, minLength: rule.value };\n      default:\n        throw new Error(`Unknown rule: ${rule.name}`);\n    }\n  }, {});\n};\n\nexport type Patterns = {\n  [key in InputValidation]: RegExp;\n};\n\n// TODO allow to override patterns\nexport const patterns: Patterns = {\n  alpha: /^[a-zA-Z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  'alphanumeric-w-space': /^[a-zA-Z0-9 ]+$/,\n  'alphanum-with-spaces': /^[a-zA-Z0-9 ]+$/,\n  email:\n    /^([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i,\n  numeric: /^[0-9]+$/,\n  url: /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w\\-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/,\n};\n\nconst patternFor = (type: InputValidation): string => {\n  switch (type) {\n    case 'alpha':\n      return patterns.alpha.source;\n    case 'alphanumeric':\n      return patterns.alphanumeric.source;\n    case 'alphanumeric-w-space':\n      return patterns['alphanumeric-w-space'].source;\n    case 'alphanum-with-spaces':\n      return patterns['alphanum-with-spaces'].source;\n    case 'url':\n      return patterns.url.source;\n    case 'numeric':\n      return patterns.numeric.source;\n    case 'email':\n      return patterns.email.source;\n    default:\n      throw new Error(`Unknown validation type: ${type}`);\n  }\n};\n","import { FunctionComponent } from 'preact';\nimport { Skeleton, SkeletonRow } from '@adobe/elsie/components';\n\nexport const FieldsFormSkeleton: FunctionComponent = (props) => {\n  return (\n    <Skeleton {...props}>\n      <SkeletonRow variant=\"heading\" size=\"medium\" />\n      <SkeletonRow variant=\"empty\" size=\"medium\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" fullWidth={true} />\n      <SkeletonRow size=\"large\" fullWidth={true} lines={3} />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n    </Skeleton>\n  );\n};\n","import { Heading } from '@/checkout/components';\nimport { createField } from '@/checkout/components/FieldsForm';\nimport '@/checkout/components/FieldsForm/FieldsForm.css';\nimport {\n  AddressFormElement,\n  AddressFormType,\n} from '@/checkout/data/models/address-form-fields';\nimport { Text } from '@adobe/elsie/i18n';\nimport { classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, Ref } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nexport interface FieldsFormProps extends HTMLAttributes<HTMLDivElement> {\n  addressType: AddressFormType;\n  fields: AddressFormElement[];\n  formRef: Ref<HTMLFormElement>;\n  headingId: string;\n  name: string;\n}\n\nexport const FieldsForm: FunctionComponent<FieldsFormProps> = ({\n  addressType,\n  className,\n  fields,\n  formRef,\n  headingId,\n  name,\n  ...props\n}) => {\n  return (\n    <div {...props} className={classes(['checkout-fields-form', className])}>\n      <Heading\n        level={2}\n        children={<Text id={headingId} />}\n        className=\"checkout-fields-form__title\"\n      />\n\n      <form\n        name={name}\n        ref={formRef}\n        className={classes(['checkout-fields-form__form', className])}\n        noValidate\n      >\n        {fields\n          .sort((a, b) => {\n            if (!a.sortOrder || !b.sortOrder) return a.code < b.code ? -1 : 1;\n            return a.sortOrder - b.sortOrder;\n          })\n          .map((element) => createField({ element, addressType }))}\n      </form>\n    </div>\n  );\n};\n","export const getFormValues = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n  const result = Object.fromEntries(formData);\n  return result;\n};\n\nexport const getFormErrors = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n\n  const data = Object.fromEntries(formData);\n\n  const result = Object.entries(data).reduce((result, [key]) => {\n    // @ts-ignore\n    const field = form.elements[key];\n\n    return field?.validationMessage\n      ? { ...result, [key]: field.validationMessage }\n      : { ...result };\n  }, {});\n\n  return result;\n};\n","import { getRegions } from '@/checkout/api';\nimport { FieldsFormSkeleton } from '@/checkout/components';\nimport {\n  DefaultValues,\n  MULTILINE_CUSTOM_ATTR_SPLIT,\n  MULTILINE_SUFFIX,\n  SaveAddressCommand,\n  useAddressForm,\n  usePreselectedFields,\n} from '@/checkout/components/AddressForm';\nimport '@/checkout/components/AddressForm/AddressForm.css';\nimport { FieldsForm as Component } from '@/checkout/components/FieldsForm/FieldsForm';\nimport { PreselectedAddressFields } from '@/checkout/containers';\nimport {\n  useStore,\n  useAddressFormFields,\n  useCountries,\n} from '@/checkout/context';\nimport {\n  AddressFormField,\n  AddressFormFieldCode,\n  AddressFormType,\n  AddressFormValues,\n  Region,\n} from '@/checkout/data/models';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty, processFormFields } from '@/checkout/utils';\nimport { getFormErrors } from '@adobe/elsie/lib/form-values';\nimport {\n  HTMLAttributes,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'preact/compat';\nimport { Dispatch, StateUpdater } from 'preact/hooks';\n\nfunction useDefaultValues(defaultCountry: string | undefined) {\n  const [defaultValues, setDefaultValues] = useState<DefaultValues>({});\n\n  useEffect(() => {\n    if (!defaultCountry) return;\n    setDefaultValues((defaultValues) => ({\n      ...defaultValues,\n      country_id: defaultCountry,\n    }));\n  }, [defaultCountry]);\n\n  return { defaultValues };\n}\n\nfunction useRegions({\n  country,\n  addressType,\n}: {\n  country: string | undefined;\n  addressType: AddressFormType;\n}) {\n  const [availableRegions, setAvailableRegions] = useState<Region[]>([]);\n\n  useEffect(() => {\n    if (!country) {\n      setAvailableRegions([]);\n      return;\n    }\n\n    getRegions(country, addressType)\n      .then((data) => {\n        setAvailableRegions(data || []);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [setAvailableRegions, country, addressType]);\n\n  return { availableRegions };\n}\n\nfunction useFormFill({\n  shouldAutoFillForm,\n  addressType,\n  setAddress,\n  fields,\n}: {\n  shouldAutoFillForm?: () => boolean;\n  addressType: AddressFormType;\n  setAddress: Dispatch<StateUpdater<AddressFormValues>>;\n  fields?: AddressFormField[];\n}) {\n  const [hasFormFillCompleted, setHasFormFillCompleted] = useState(false);\n  const cartData = cartSignal.value.data;\n\n  useEffect(() => {\n    if (hasFormFillCompleted) return;\n\n    const isReadyToProcess = cartData && fields;\n    if (!isReadyToProcess) return;\n\n    setHasFormFillCompleted(true);\n\n    const addressData =\n      addressType === AddressFormType.SHIPPING\n        ? cartData?.shippingAddresses\n        : cartData?.billingAddress;\n\n    const isAnAddressList = Array.isArray(addressData);\n    const hasAddressData = isAnAddressList\n      ? addressData.length > 0\n      : !!addressData;\n\n    if (!hasAddressData) return;\n    if (shouldAutoFillForm && !shouldAutoFillForm()) return;\n\n    const isMultiline = (code: string) => {\n      if (!fields) return false;\n      const field = fields.find((field) => field.code === code);\n      if (!field) return false;\n      return field.frontendInput === 'MULTILINE';\n    };\n\n    const firstAddress = Array.isArray(addressData)\n      ? addressData[0]\n      : addressData;\n\n    if (!firstAddress) return;\n\n    const addressFormValues: AddressFormValues = {\n      [AddressFormFieldCode.City]: firstAddress.city,\n      [AddressFormFieldCode.Company]: firstAddress.company || '',\n      [AddressFormFieldCode.Country]: firstAddress.country.value,\n      [AddressFormFieldCode.FirstName]: firstAddress.firstName,\n      [AddressFormFieldCode.LastName]: firstAddress.lastName,\n      [AddressFormFieldCode.PostCode]: firstAddress.postCode || '',\n      [AddressFormFieldCode.Telephone]: firstAddress.telephone || '',\n      [AddressFormFieldCode.Vat]: firstAddress.vatId || '',\n    };\n\n    const region = firstAddress.region;\n\n    if (region) {\n      const regionId = region?.id?.toString();\n\n      if (regionId) {\n        addressFormValues[AddressFormFieldCode.Region] = regionId;\n        addressFormValues[AddressFormFieldCode.RegionId] = regionId;\n      } else {\n        addressFormValues[AddressFormFieldCode.Region] = region.code;\n      }\n    }\n\n    if (firstAddress?.street && firstAddress.street.length > 0) {\n      firstAddress.street.forEach((street, index) => {\n        addressFormValues[\n          `${AddressFormFieldCode.Street}${MULTILINE_SUFFIX}${index}`\n        ] = street!;\n      });\n    }\n\n    const customAttributes = firstAddress?.customAttributes || [];\n\n    customAttributes.forEach((attribute) => {\n      if (!isMultiline(attribute.code)) {\n        addressFormValues[attribute.code] = attribute.value;\n      } else {\n        const values = attribute.value.split(MULTILINE_CUSTOM_ATTR_SPLIT);\n        values.forEach((value, index) => {\n          addressFormValues[`${attribute.code}${MULTILINE_SUFFIX}${index}`] =\n            value;\n        });\n      }\n    });\n\n    setAddress(addressFormValues);\n  }, [\n    setAddress,\n    shouldAutoFillForm,\n    addressType,\n    cartData,\n    fields,\n    hasFormFillCompleted,\n  ]);\n}\n\nexport interface AddressFormProps extends HTMLAttributes<HTMLDivElement> {\n  name: string;\n  preselectedFields?: PreselectedAddressFields;\n  addressType: AddressFormType;\n  headingId: string;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n  shouldAutoFillForm?: () => boolean;\n}\n\nexport type AddressFormHandle = {\n  triggerSaveAddress: (\n    signal: AbortSignal\n  ) => Promise<typeof cartSignal.value.data> | undefined;\n};\n\nexport const AddressForm = forwardRef<AddressFormHandle, AddressFormProps>(\n  (\n    {\n      name,\n      preselectedFields,\n      addressType,\n      headingId,\n      saveAddressHandler,\n      children,\n      shouldAutoFillForm,\n      ...props\n    },\n    ref\n  ) => {\n    const { fields } = useAddressFormFields();\n    const { countries: availableCountries } = useCountries();\n    const isLoadingCountries = availableCountries === undefined;\n    const isLoadingFormFields = fields === undefined;\n\n    const { config } = useStore();\n    const isLoadingStoreConfig = config === undefined;\n\n    const { defaultValues } = useDefaultValues(config?.defaultCountry);\n\n    const { preselection } = usePreselectedFields({\n      fields,\n      preselectedFields,\n    });\n\n    const formRef = useRef<HTMLFormElement>(null);\n\n    const {\n      address,\n      setAddress,\n      onSelection,\n      errors,\n      dismissError,\n      onChange,\n      onInvalid,\n      onBlur,\n    } = useAddressForm({\n      formRef,\n      type: addressType,\n      defaultValues,\n      preselection,\n      saveAddressHandler,\n    });\n\n    const { availableRegions } = useRegions({\n      country: address.country_id,\n      addressType,\n    });\n\n    useImperativeHandle(ref, () => ({\n      triggerSaveAddress: (signal: AbortSignal) => {\n        if (!formRef.current) return;\n        const errors = getFormErrors(formRef.current);\n        if (!isEmpty(errors)) return;\n        return saveAddressHandler({ signal, address });\n      },\n    }));\n\n    useFormFill({\n      shouldAutoFillForm,\n      addressType,\n      setAddress,\n      fields,\n    });\n\n    const isLoading =\n      isLoadingFormFields || isLoadingCountries || isLoadingStoreConfig;\n\n    if (isLoading) {\n      return <FieldsFormSkeleton data-testid={`${addressType}-skeleton`} />;\n    }\n\n    const transformedFields = processFormFields({\n      address,\n      addressType,\n      availableCountries,\n      availableRegions,\n      config,\n      dismissError,\n      errors,\n      fields,\n      onBlur,\n      onChange,\n      onInvalid,\n      onSelection,\n      setAddress,\n    });\n\n    const typeMapping = {\n      [AddressFormType.SHIPPING]: 'shipping',\n      [AddressFormType.BILLING]: 'billing',\n    };\n\n    return (\n      <Component\n        {...props}\n        name={name}\n        addressType={addressType}\n        className={`checkout-${typeMapping[addressType]}-form`}\n        data-testid={`${typeMapping[addressType]}-form`}\n        fields={transformedFields}\n        formRef={formRef}\n        headingId={headingId}\n      />\n    );\n  }\n);\n","import { useCallback, useEffect, useState } from 'preact/hooks';\nimport { useServices } from '@/checkout/context';\nimport { events } from '@adobe/event-bus';\nimport { DEBOUNCE_TIME } from './constants';\nimport {\n  AddressFormType,\n  AddressFormValues,\n} from '@/checkout/data/models/address-form-fields';\n\nexport function useAddressBackup(addressType: AddressFormType) {\n  const { backupService } = useServices();\n  const [addressBackup, setAddressBackup] = useState<AddressFormValues | null>(\n    null\n  );\n\n  // restore address from local storage\n  useEffect(() => {\n    const backup = backupService.restore<AddressFormValues>(addressType);\n    if (!backup) return;\n    setAddressBackup(backup);\n  }, [addressType, backupService]);\n\n  // remove backup when the order is placed\n  useEffect(() => {\n    const onOrder = events.on('checkout/order', () => {\n      backupService.remove(addressType);\n    });\n\n    return () => {\n      onOrder?.off();\n    };\n  }, [addressType, backupService]);\n\n  const backup = useCallback(\n    (address: AddressFormValues) => {\n      return setTimeout(() => {\n        // we do not want to update the state to avoid re-rendering\n        backupService.backup<AddressFormValues>(addressType, address);\n      }, DEBOUNCE_TIME);\n    },\n    [addressType, backupService]\n  );\n\n  const removeBackup = useCallback(() => {\n    backupService.remove(addressType);\n  }, [addressType, backupService]);\n\n  return { addressBackup, backup, removeBackup };\n}\n","import { useCallback, useState } from 'preact/hooks';\n\nexport type Translations = {\n  badInput: string;\n  patternMismatch: string;\n  rangeOverflow: string;\n  rangeUnderflow: string;\n  tooLong: string;\n  tooShort: string;\n  typeMismatch: string;\n  valueMissing: string;\n};\n\ntype FormElement = HTMLInputElement | HTMLSelectElement;\n\ntype Constraint =\n  | 'badInput'\n  | 'patternMismatch'\n  | 'rangeOverflow'\n  | 'rangeUnderflow'\n  | 'tooLong'\n  | 'tooShort'\n  | 'typeMismatch'\n  | 'valueMissing';\n\ntype Attribute = 'aria-label' | 'maxlength' | 'minlength' | 'min' | 'max';\n\nconst attributesMapping: Record<Constraint, Attribute> = {\n  badInput: 'aria-label',\n  patternMismatch: 'aria-label',\n  rangeOverflow: 'max',\n  rangeUnderflow: 'min',\n  tooLong: 'maxlength',\n  tooShort: 'minlength',\n  typeMismatch: 'aria-label',\n  valueMissing: 'aria-label',\n};\n\nconst constraints: Constraint[] = [\n  'badInput',\n  'patternMismatch',\n  'rangeOverflow',\n  'rangeUnderflow',\n  'tooLong',\n  'tooShort',\n  'typeMismatch',\n  'valueMissing',\n];\n\nexport const useValidity = (translations: Translations) => {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const validateFormElement = useCallback(\n    (formElement: FormElement) => {\n      const { name, validity, validationMessage } = formElement;\n\n      let error = validity.valid ? '' : validationMessage;\n\n      constraints.forEach((constraint) => {\n        if (!validity[constraint]) return;\n        const translation = translations[constraint];\n        if (!translation) return;\n        const attribute = attributesMapping[constraint];\n        error = translation.replace(\n          '{field}',\n          formElement.getAttribute(attribute) || ''\n        );\n      });\n\n      setErrors((prevErrors) => ({ ...prevErrors, [name]: error }));\n    },\n    [translations]\n  );\n\n  const dismissError = (code: string) => {\n    if (!errors[code]) return;\n\n    setErrors((prevErrors) => {\n      // eslint-disable-next-line\n      const { [code]: _, ...rest } = prevErrors;\n      return rest;\n    });\n  };\n\n  return {\n    errors,\n    dismissError,\n    validateFormElement,\n  };\n};\n","import { PreselectedMappedField } from '@/checkout/components/AddressForm';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { useAddressBackup } from '@/checkout/components/AddressForm/useAddressBackup';\nimport {\n  AddressFormErrors,\n  AddressFormType,\n  AddressFormValues,\n} from '@/checkout/data/models';\nimport {\n  Translations as ValidityTranslations,\n  useValidity,\n} from '@/checkout/hooks/useValidity';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty } from '@/checkout/utils';\nimport { useText } from '@adobe/elsie/i18n';\nimport { getFormErrors } from '@adobe/elsie/lib';\nimport { RefObject } from 'preact';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\n\nexport type DefaultValues = {\n  country_id?: string;\n};\n\nexport type AddressFormState = {\n  address: AddressFormValues;\n  errors: AddressFormErrors;\n};\n\nexport type SaveAddressCommand = {\n  signal?: AbortSignal;\n  address: AddressFormValues;\n};\n\nexport type UseAddressFormProps = {\n  formRef: RefObject<HTMLFormElement>;\n  type: AddressFormType;\n  defaultValues?: DefaultValues;\n  preselection?: PreselectedMappedField | null;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n};\n\nconst isFormValid = (formRef: RefObject<HTMLFormElement>): boolean => {\n  const form = formRef.current;\n  if (!form) return false;\n  const errors = getFormErrors(form);\n  return isEmpty(errors);\n};\n\nexport const useAddressForm = ({\n  formRef,\n  type,\n  defaultValues = {},\n  preselection = {},\n  saveAddressHandler,\n}: UseAddressFormProps) => {\n  const translations = useText({\n    badInput: 'Checkout.AddressForm.Validity.badInput',\n    patternMismatch: 'Checkout.AddressForm.Validity.patternMismatch',\n    rangeUnderflow: 'Checkout.AddressForm.Validity.rangeUnderflow',\n    tooLong: 'Checkout.AddressForm.Validity.tooLong',\n    tooShort: 'Checkout.AddressForm.Validity.tooShort',\n    typeMismatch: 'Checkout.AddressForm.Validity.typeMismatch',\n    valueMissing: 'Checkout.AddressForm.Validity.valueMissing',\n  }) as ValidityTranslations;\n\n  const hasUnsavedChanges = useRef(false);\n  const [address, setAddress] = useState<AddressFormValues>({});\n\n  const { addressBackup, backup, removeBackup } = useAddressBackup(type);\n\n  const { errors, validateFormElement, dismissError } =\n    useValidity(translations);\n\n  const saveAddressForm = useCallback(\n    (command: SaveAddressCommand) => {\n      hasUnsavedChanges.current = false;\n      saveAddressHandler(command)\n        .then(() => {\n          removeBackup();\n        })\n        .catch((error) => {\n          hasUnsavedChanges.current = true;\n          console.error('Saving address form failed:', error);\n        });\n    },\n    [removeBackup, saveAddressHandler]\n  );\n\n  const updateField = (code: string, value: string) => {\n    setAddress((prevAddress) => ({\n      ...prevAddress,\n      [code]: value,\n    }));\n    hasUnsavedChanges.current = true;\n  };\n\n  const onChange = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const { name, value } = target;\n\n    updateField(name, value);\n\n    validateFormElement(target);\n  };\n\n  const onInvalid = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    validateFormElement(target);\n  };\n\n  const onSelection = (event: Event) => {\n    const target = event.target as HTMLSelectElement;\n    const { name, value } = target;\n    updateField(name, value);\n    validateFormElement(target);\n  };\n\n  const onBlur = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    target.checkValidity();\n  };\n\n  // load default, preselected and backup address\n  useEffect(() => {\n    setAddress((prevAddress) => {\n      return {\n        ...defaultValues,\n        ...preselection,\n        ...addressBackup,\n        ...prevAddress,\n      };\n    });\n  }, [defaultValues, preselection, addressBackup]);\n\n  // backup address\n  useEffect(() => {\n    if (!hasUnsavedChanges.current) return;\n    const timerId = backup(address);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [address, backup]);\n\n  // sync address with the backend\n  useEffect(() => {\n    if (!hasUnsavedChanges.current || !isFormValid(formRef)) return;\n\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const timer = setTimeout(() => {\n      saveAddressForm({ signal, address });\n    }, DEBOUNCE_TIME);\n\n    return () => {\n      clearTimeout(timer);\n      controller.abort();\n    };\n  }, [address, formRef, saveAddressForm]);\n\n  return {\n    address,\n    setAddress,\n    errors,\n    dismissError,\n    onChange,\n    onSelection,\n    onBlur,\n    onInvalid,\n  };\n};\n","import { PreselectedAddressFields } from '@/checkout/containers';\nimport {\n  AddressFormField,\n  AddressFormFieldCode,\n} from '@/checkout/data/models/address-form-fields';\nimport { useMemo } from 'preact/hooks';\n\ntype PreselectedFieldKey = keyof PreselectedAddressFields;\n\nconst FIELD_CODE_MAPPING: {\n  [key in PreselectedFieldKey]: AddressFormFieldCode;\n} = {\n  countryCode: AddressFormFieldCode.Country,\n  region: AddressFormFieldCode.Region,\n  postCode: AddressFormFieldCode.PostCode,\n};\n\nexport type UsePreselectedFieldsProps = {\n  fields?: AddressFormField[];\n  preselectedFields?: PreselectedAddressFields;\n};\n\nexport function usePreselectedFields({\n  fields,\n  preselectedFields,\n}: UsePreselectedFieldsProps) {\n  const preselection = useMemo(() => {\n    const hasFields = !!fields && fields.length > 0;\n    const hasPreselectedFields = !!preselectedFields;\n\n    if (!hasFields || !hasPreselectedFields) return null;\n\n    return Object.keys(preselectedFields).reduce((acc, code) => {\n      const formCode = FIELD_CODE_MAPPING[code as PreselectedFieldKey];\n      if (!formCode) return acc;\n\n      const formField = fields.some((field) => field.code === formCode);\n      if (!formField) return acc;\n\n      return {\n        ...acc,\n        [formCode]: preselectedFields[code as PreselectedFieldKey],\n      };\n    }, {});\n  }, [fields, preselectedFields]);\n\n  return { preselection };\n}\n","import { useEffect, useState } from 'preact/hooks';\n\nexport const useBreakpoint = () => {\n  const getBreakpoint = () => {\n    if (window.innerWidth >= 1920) return 'xxlarge';\n    if (window.innerWidth >= 1366) return 'xlarge';\n    if (window.innerWidth >= 1024) return 'large';\n    if (window.innerWidth >= 768) return 'medium';\n\n    return 'small';\n  };\n\n  const [breakpoint, setBreakpoint] = useState<\n    ReturnType<typeof getBreakpoint>\n  >(getBreakpoint());\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    const handleResize = () => {\n      if (timeoutId) clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => setBreakpoint(getBreakpoint()), 50);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, []);\n\n  return breakpoint;\n};\n","import { Heading } from '@/checkout/components';\nimport { useBreakpoint } from '@/checkout/hooks/useBreakpoint';\nimport { Text } from '@adobe/elsie/i18n';\nimport { VComponent, classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nimport '@/checkout/components/Checkout/Checkout.css';\n\nconst ConditionalWrapper: FunctionComponent<{\n  children?: VNode;\n  className: string;\n}> = ({ children, className }) => {\n  const breakpoint = useBreakpoint();\n  if (breakpoint === 'small') return <>{children}</>;\n  return <div className={className}>{children}</div>;\n};\n\nexport type AsideSections = {\n  cartSummary: VNode;\n  orderSummary: VNode;\n};\n\nconst Aside: FunctionComponent<{ sections: AsideSections }> = ({\n  sections,\n}) => {\n  return (\n    <ConditionalWrapper className=\"checkout__aside\">\n      <>\n        <VComponent node={sections.orderSummary} />\n        <VComponent node={sections.cartSummary} />\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport type MainSections = {\n  billingAddress: VNode;\n  billToShippingAddress?: VNode;\n  login: VNode;\n  paymentMethods: VNode;\n  placeOrder: VNode;\n  shippingAddress?: VNode;\n  shippingMethods?: VNode;\n};\n\nconst MainContent: FunctionComponent<MainSections> = ({\n  billingAddress,\n  billToShippingAddress,\n  login,\n  paymentMethods,\n  placeOrder,\n  shippingAddress,\n  shippingMethods,\n}) => {\n  return (\n    <>\n      <VComponent node={login} />\n      {shippingAddress && <VComponent node={shippingAddress} />}\n      {billToShippingAddress && <VComponent node={billToShippingAddress} />}\n      {shippingMethods && <VComponent node={shippingMethods} />}\n      <VComponent node={paymentMethods} />\n      <VComponent node={billingAddress} />\n      <VComponent node={placeOrder} />\n    </>\n  );\n};\n\nconst Main: FunctionComponent<{\n  outOfStock?: VNode;\n  sections?: MainSections;\n}> = ({ outOfStock, sections }) => {\n  return (\n    <ConditionalWrapper className=\"checkout__main\">\n      <>\n        <Heading level={1} className=\"checkout-title\">\n          <Text id=\"Checkout.title\" />\n        </Heading>\n\n        {outOfStock && (\n          <VComponent className=\"checkout-outOfStock\" node={outOfStock} />\n        )}\n\n        {sections && <MainContent {...sections} />}\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport interface CheckoutProps extends HTMLAttributes<HTMLDivElement> {\n  banner?: VNode;\n}\n\ninterface CheckoutComponent extends FunctionComponent<CheckoutProps> {\n  Main: typeof Main;\n  Aside: typeof Aside;\n}\n\nexport const Checkout: CheckoutComponent = (props) => {\n  const { banner, className, children, ...restProps } = props;\n\n  return (\n    <div className={classes(['checkout', className])} {...restProps}>\n      {banner && <VComponent className=\"checkout__banner\" node={banner} />}\n      <div className=\"checkout__content\">{children}</div>\n    </div>\n  );\n};\n\nCheckout.Main = Main;\nCheckout.Aside = Aside;\n","import { FunctionComponent } from 'preact';\nimport { HTMLAttributes, JSX } from 'preact/compat';\nimport '@/checkout/components/Heading/Heading.css';\n\nexport interface HeadingProps extends Omit<HTMLAttributes<HTMLHeadingElement>, 'level'> {\n  level?: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport const Heading: FunctionComponent<HeadingProps> = ({\n  className,\n  children,\n  level = 2,\n}) => {\n  const Heading =\n    level >= 1 && level <= 6\n      ? (`h${level}` as keyof JSX.IntrinsicElements)\n      : 'h2';\n\n  return (\n      <Heading className={className}>\n        {children}\n      </Heading>\n  );\n};\n"],"names":["autocompleteFieldCodes","firstname","lastname","company","country","region","city","postcode","telephone","street","email","middlename","prefix","suffix","isEmpty","obj","Object","keys","length","constructor","transformRegionOptions","regions","map","value","id","toString","code","text","name","transformCountryOptions","countries","label","processFormFields","address","addressType","availableCountries","availableRegions","config","dismissError","errors","fields","onBlur","onChange","onInvalid","onSelection","setAddress","resetRegion","AddressFormFieldCode","Region","RegionId","syncRegionId","regionId","field","error","frontendInput","handleSelect","isDisabled","isRequired","options","AttributeFrontendInputEnum","Multiline","getMultilineValues","Country","AddressFormType","SHIPPING","regionsSignal","event","target","refetchEstimatedShippingMethods","country_code","selectedRegionId","pending","countriesWithRequiredRegion","includes","country_id","displayStateIfOptional","Undefined","Select","Text","selectedRegion","region_id","defaultOnChange","region_name","find","regionOption","PostCode","countriesWithOptionalZipCode","estimateShipppingTimer","criteria","cartData","cartSignal","data","hasCartData","firstAddress","shippingAddresses","availableShippingMethods","clearTimeout","setTimeout","estimateShippingMethods","cartId","DEBOUNCE_TIME","generateId","index","generateClassName","hiddenField","element","defaultValue","_jsx","className","type","textField","validateRules","validity","validityProps","Field","disabled","children","Input","autocomplete","floatingLabel","placeholder","required","undefined","multilineField","multilineCount","numOfFields","_Fragment","Array","from","i","selectField","handleSelectAttribute","Picker","createField","rules","reduce","props","rule","ValidationRuleEnum","DateRangeMax","max","DateRangeMin","min","FileExtensions","accept","InputValidation","pattern","patternFor","MaxFileSize","MaxImageHeight","MaxImageWidth","MaxTextLength","maxLength","MinTextLength","minLength","Error","patterns","alpha","alphanumeric","numeric","url","source","FieldsFormSkeleton","_jsxs","Skeleton","SkeletonRow","variant","size","fullWidth","lines","FieldsForm","formRef","headingId","classes","Heading","level","ref","noValidate","sort","a","b","sortOrder","getFormErrors","form","formData","FormData","fromEntries","result","entries","key","elements","validationMessage","useDefaultValues","defaultCountry","defaultValues","setDefaultValues","useState","useEffect","useRegions","setAvailableRegions","getRegions","then","catch","console","useFormFill","shouldAutoFillForm","hasFormFillCompleted","setHasFormFillCompleted","addressData","billingAddress","isArray","isMultiline","addressFormValues","City","Company","FirstName","firstName","LastName","lastName","postCode","Telephone","Vat","vatId","forEach","Street","MULTILINE_SUFFIX","customAttributes","attribute","split","MULTILINE_CUSTOM_ATTR_SPLIT","AddressForm","forwardRef","preselectedFields","saveAddressHandler","useAddressFormFields","useCountries","isLoadingCountries","isLoadingFormFields","useStore","isLoadingStoreConfig","preselection","usePreselectedFields","useRef","useAddressForm","useImperativeHandle","triggerSaveAddress","signal","current","transformedFields","typeMapping","BILLING","Component","useAddressBackup","backupService","useServices","addressBackup","setAddressBackup","backup","restore","onOrder","events","on","remove","off","useCallback","removeBackup","attributesMapping","badInput","patternMismatch","rangeOverflow","rangeUnderflow","tooLong","tooShort","typeMismatch","valueMissing","constraints","useValidity","translations","setErrors","validateFormElement","formElement","valid","constraint","translation","replace","getAttribute","prevErrors","_","rest","isFormValid","useText","hasUnsavedChanges","saveAddressForm","command","updateField","prevAddress","checkValidity","timerId","controller","AbortController","timer","abort","FIELD_CODE_MAPPING","countryCode","useMemo","acc","formCode","some","useBreakpoint","getBreakpoint","window","innerWidth","breakpoint","setBreakpoint","timeoutId","handleResize","addEventListener","removeEventListener","ConditionalWrapper","Aside","sections","VComponent","node","orderSummary","cartSummary","MainContent","billToShippingAddress","login","paymentMethods","placeOrder","shippingAddress","shippingMethods","Main","outOfStock","Checkout","banner","restProps"],"mappings":"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"}